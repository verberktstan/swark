{:deps
 ;; Clojure standard library
 {org.clojure/clojure  {:mvn/version "1.11.0"}
  org.clojure/data.csv {:mvn/version "1.0.1"}} ;; NOTE: For testing CSV input/output only..
 :aliases
 {:repl/reloaded
  {:extra-deps {nrepl/nrepl                  {:mvn/version "1.0.0"}
                cider/cider-nrepl            {:mvn/version "0.28.7"}
                com.bhauman/rebel-readline   {:mvn/version "0.1.4"}
                djblue/portal                {:mvn/version "0.34.2"}
                org.clojure/tools.namespace  {:mvn/version "1.3.0"}
                org.clojure/tools.deps.alpha {:git/url "https://github.com/clojure/tools.deps.alpha"
                                              :git/sha "e4fb92eef724fa39e29b39cc2b1a850567d490dd"}
                org.slf4j/slf4j-nop          {:mvn/version "2.0.5"}
                lambdaisland/kaocha          {:mvn/version "1.71.1119"}
                org.clojure/test.check       {:mvn/version "1.1.1"}
                ring/ring-mock               {:mvn/version "0.4.0"}}
   :main-opts  ["-m" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "--interactive"
                "-f" "rebel-readline.main/-main"]}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  ;; clojure -X:test/run :fail-fast true
  :test/run
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.80.1274"}}
   :main-opts   ["-m" "kaocha.runner"]
   :exec-fn     kaocha.runner/exec-fn
   :exec-args   {:randomize? false
                 :fail-fast? true}}
  :test/run-cljs
  {:extra-paths ["test"]
   :extra-deps {com.lambdaisland/kaocha-cljs {:mvn/version "1.5.154"}
   :main-opts ["-m" "kaocha.runner" "unit-cljs"]}}

  :deploy
  {:extra-deps {slipset/deps-deploy {:mvn/version "0.2.2"}}
   :exec-fn    deps-deploy.deps-deploy/deploy
   :exec-args  {:installer      :remote
                :sign-releases? true
                :artifact       "swark-0.1.3.jar"}}
  :install
  {:extra-deps {slipset/deps-deploy {:mvn/version "0.2.2"}}
   :exec-fn    deps-deploy.deps-deploy/deploy
   :exec-args  {:installer :local
                :artifact  "swark-0.1.3.jar"}}

  #_#_:build {:extra-paths ["build"]
              :deps        {io.github.seancorfield/build-clj {:git/tag "v0.8.0" :git/sha "9bd8b8a"}}
              :ns-default  build}

  ;; build an uberjar (application) with AOT compilation by default:
  :uberjar {:replace-deps {com.github.seancorfield/depstar {:mvn/version "2.1.303"}}
            :exec-fn      hf.depstar/uberjar
            :exec-args    {:aot true}}}}
